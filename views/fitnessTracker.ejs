
<script type="module">
  // Import the functions you need from the SDKs you need
  import { initializeApp } from 'https://www.gstatic.com/firebasejs/9.6.10/firebase-app.js';
  import { getDatabase, ref, push, serverTimestamp } from 'https://www.gstatic.com/firebasejs/9.6.10/firebase-database.js';
  import { onChildAdded } from 'https://www.gstatic.com/firebasejs/9.6.10/firebase-database.js';
  import { remove } from 'https://www.gstatic.com/firebasejs/9.6.10/firebase-database.js';
  import { getStorage, ref as storageRef, uploadBytes, getDownloadURL, deleteObject, listAll } from 'https://www.gstatic.com/firebasejs/9.6.10/firebase-storage.js';
  


  
  // Your web app's Firebase configuration
  const firebaseConfig = {
    apiKey: "AIzaSyAwMd2QtlJi9A8i-ay-szs7meUk6s-m08s",

    authDomain: "project-3-7b269.firebaseapp.com",

    databaseURL: "https://project-3-7b269-default-rtdb.firebaseio.com",

    projectId: "project-3-7b269",

    storageBucket: "project-3-7b269.appspot.com",

    messagingSenderId: "21869913357",

    appId: "1:21869913357:web:3808fb9892357efa897c44"

  }

  // Initialize Firebase
  const app = initializeApp(firebaseConfig);
  const db = getDatabase(app);
  const storage = getStorage(app);

  async function uploadImageToFirebase(file) {
  // Format the timestamp and append it to the file name
  const uploadTimestamp = new Date();
  const timestamp = uploadTimestamp.getTime(); // Gets the current time in milliseconds
  const newFileName = `${timestamp}_${file.name}`;
  const storageReference = storageRef(storage, `images/${newFileName}`);
  
  try {
    const snapshot = await uploadBytes(storageReference, file);
    const downloadURL = await getDownloadURL(snapshot.ref);
    console.log('Image uploaded successfully', downloadURL);
    return { downloadURL, formattedDate: uploadTimestamp.toLocaleDateString() + ' ' + uploadTimestamp.toLocaleTimeString() };
  } catch (error) {
    console.error('Error uploading image:', error);
  }
  }


  document.getElementById('imageUploadForm').addEventListener('submit', async (event) => {
  event.preventDefault();
  const fileInput = document.getElementById('activityImage');
  if (fileInput.files.length > 0) {
    const file = fileInput.files[0];
    const uploadResult = await uploadImageToFirebase(file);
    if (uploadResult) {
      displayImage(uploadResult.downloadURL, uploadResult.formattedDate);
    }
  }
  });

  function displayImage(url, subtitle) {
  const imageContainer = document.getElementById('latestImageDisplay');
  const image = document.createElement('img');
  image.src = url;
  image.className = 'img-fluid';
  image.style.marginBottom = '10px';

  const caption = document.createElement('p');
  caption.textContent = subtitle;

  const deleteBtn = document.createElement('button');
  deleteBtn.textContent = 'Delete';
  deleteBtn.className = 'btn btn-danger btn-sm';
  deleteBtn.onclick = function() {
    deleteImage(url, image, caption, deleteBtn);
  };

  imageContainer.appendChild(image);
  imageContainer.appendChild(caption);
  imageContainer.appendChild(deleteBtn);
  }
  
  //fetch images from firebase storage
  async function fetchImages() {
    const listRef = storageRef(storage, 'images/');
    try {
        // List all items in the 'images' folder
        const res = await listAll(listRef);
        res.items.forEach((itemRef) => {
            // Get the download URL for each item
            getDownloadURL(itemRef).then((url) => {
                displayImage(url, "Previously uploaded");
            });
        });
    } catch (error) {
        console.error("Failed to fetch images:", error);
    }
  }
  //event listener to fetch images
  document.addEventListener('DOMContentLoaded', function() {
    fetchImages();
  });




  async function deleteImage(imageURL, imageElement, captionElement, deleteBtn) {
  // Extract file name from imageURL and create a reference to the file in storage
  const imageName = imageURL.split('/').pop().split('#')[0].split('?')[0];
  const fileRef = storageRef(storage, `images/${imageName}`);
  try {
    await deleteObject(fileRef);
    console.log('Image deleted successfully');
    // Remove the image, caption, and delete button from the UI
    imageElement.remove();
    captionElement.remove();
    deleteBtn.remove();
  } catch (error) {
    console.error('Error deleting image:', error);
  }
  }

  // Function to log activity to Firebase
  async function logActivityToFirebase(activityType, activityDuration) {
    const activitiesRef = ref(db, 'activities');
    await push(activitiesRef, {
      type: activityType,
      duration: activityDuration,
      timestamp: serverTimestamp() // Correct way to get server timestamp
    }).then(() => {
      console.log('Activity logged successfully');
    }).catch((error) => {
      console.error('Error logging activity:', error);
    });
  }

  // Function to format a timestamp into a human-readable date
  function formatDate(timestamp) {
    const date = new Date(timestamp);
    return `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`;
  }

  // Function to listen for new activities in Firebase and update the UI
  // Function to listen for new activities in Firebase and update the UI
  function displayLoggedActivities() {
  const activitiesRef = ref(db, 'activities');
  // Listen for new activities
  onChildAdded(activitiesRef, (data) => {
    // Get the activity data
    const activity = data.val();
    // Create a new list item for the activity
    const li = document.createElement('li');
    li.className = 'list-group-item d-flex justify-content-between align-items-center';
    li.textContent = `${activity.type} for ${activity.duration} minutes on ${formatDate(activity.timestamp)}`;

    // Create a delete button with an icon
    const deleteBtn = document.createElement('button');
    deleteBtn.className = 'btn btn-danger btn-sm';
    deleteBtn.innerHTML = '<i class="bi bi-trash-fill"></i>';
    deleteBtn.onclick = function() {
      deleteActivity(data.key, li); // Pass the li element to deleteActivity
    };

    // Append the delete button to the list item
    li.appendChild(deleteBtn);

    // Prepend the new list item to the activities list
    const activitiesList = document.getElementById('activitiesList');
    activitiesList.insertBefore(li, activitiesList.firstChild);
  });
  }

  

  function deleteActivity(activityKey, listItemElement) {
    const activityRef = ref(db, `activities/${activityKey}`);
    remove(activityRef).then(() => {
      console.log('Activity deleted successfully');
      listItemElement.remove(); // Remove the list item from the DOM
    }).catch((error) => {
      console.error('Error deleting activity:', error);
    });
  }

  // Call the function to start displaying logged activities
  displayLoggedActivities();



  console.log('Logging activity:', {activityType, activityDuration});

  // Call the function to log activity after the form is submitted
  document.getElementById('logActivityForm').addEventListener('submit', (event) => {
    event.preventDefault();
    const activityType = document.getElementById('activityType').value;
    const activityDuration = document.getElementById('activityDuration').value;
    logActivityToFirebase(activityType, activityDuration);
  });




</script>





<div class="container py-4">
  <h1 class="mb-3">Record your exercise</h1>
  <div class="row">
      <div class="col-md-6">
          <div class="card mb-4 width-row">
              <div class="card-body">
                  <h2 class="card-title">Log Activity</h2>
                  <form id="logActivityForm">
                      <div class="mb-3">
                          <label for="activityType" class="form-label">Activity Type</label>
                          <select class="form-select" id="activityType">
                              <option>Running</option>
                              <option>Cycling</option>
                              <option>Swimming</option>
                              <option>Walking</option>
                              <option>Weight Machine</option>
                              <option>Yoga</option>
                              <option>Threadmill</option>
                              <option>Hiking</option>
                              <option>Eliptical trainer</option>
                              <option>Martial Arts</option>
                              <option>Pilates</option>
                              <option>Rock Climbing</option>
                              <option>Skiing/Snowboarding</option>
                              <option>CrossFit</option>
                              <option>Parkour</option>
                              <option>Surfing</option>
                              <option>Dance</option>
                          </select>
                      </div>
                      <div class="mb-3">
                          <label for="activityDuration" class="form-label">Duration (minutes)</label>
                          <input type="number" class="form-control" id="activityDuration" placeholder="Enter duration">
                      </div>
                      <button type="submit" class="btn btn-primary">Log Activity</button>
                  </form>
            </div>
          </div>

          <div class="card width-row">
              <div class="card-body">
                  <h2 class="card-title">Logged Activities</h2>
                  <ul id="activitiesList" class="list-group list-group-flush"></ul>
              </div>
          </div>
      </div>
      <div class="col-md-6">
          <div class="card mb-4 width-row">
              <div class="card-body">
                  <h2 class="card-title">Check-in with image</h2>
                  <form id="imageUploadForm">
                      <div class="mb-3">
                          <label for="activityImage" class="form-label">Upload Image</label>
                          <input type="file" class="form-control" id="activityImage" accept="image/*">
                      </div>
                      <button type="submit" class="btn btn-primary">Upload Image</button>
                      <button type="button" class="btn btn-danger" id="deleteLastImage" id="deleteLastImage">Delete Last Image</button>
                  </form>
              </div>
          </div>
          <div class="card width-row">
              <div class="card-body">
                  <h2>Latest Check-in</h2>
                  <div id="latestImageDisplay" class="mb-3">
                      <!-- Image will be inserted here via JavaScript -->
                  </div>
                  <p><span id="uploadDateTime"></span></p>
              </div>
          </div>
      </div>
  </div>
</div>
<script type = "module"> // Function to upload the image to Firebase Storage




</script>


<style>
  
  .width-row {
    min-width: 80%;
  }

  html, body {
    height: 100%; /* Make sure the html and body tags take up the full viewport height */
    margin: 0; 
  }
  
  body {
    display: flex;
    flex-direction: column;
    min-height: 100vh;
    background-color: #f8f9fa; 
    padding: 0px;
  }
  
  .container {
    flex: 1;
    background-color: #ffffff;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    padding: 20px;
    margin-top: 20px; 
  }
  h1, h2 {
    color: #007bff;
  }
  .form-section {
    margin-top: 30px;
}
  
  #user-info {
    margin-top: 20px;
    padding: 20px;
    background-color: #ffffff;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
  }

  p {
    color: #495057;
  }
  
  #activity-cards {
    margin-top: 20px;
    display: flex;
    flex-wrap: wrap;
    justify-content: space-around;
  }

  .card {
    width: 300px;
    margin: 10px;
    background-color: #ffffff;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    position: relative; /* Added position relative for absolute positioning */
  }

  .card-body {
    padding: 20px;
  }
  h5 {
    color: #007bff;
    margin-bottom: 10px; /* Added margin to separate text from image */
  }

    /* Add custom styles for activity images */
  .activity-image {
    width: 30px;
    height: 30px;
    margin-right: 10px;
    position: absolute;
    top: 20px;
    right: 20px;
    }
  .chart-container {
    margin-top: 20px;
    background-color: #ffffff;
    border-radius: 10px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    padding: 15px;
  }
  .right-column {
    /* This ensures that the right column only takes up the necessary space */
    flex: 1;
    max-width: 50%;
    padding-left: 10px; /* Or any appropriate value */
  }

  .latest-upload-container {
    /* Your existing styles for the latest uploaded image container */
    /* ... */
  }

  /* Ensure that the button to delete the last image doesn't inherit any unwanted styles */
  #deleteLastImage {
    /* Add specific styles for the delete button here if needed */
  }  
   
</style>